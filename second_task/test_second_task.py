"""Tests for second_task module."""
import pytest
from second_task import generator_numbers, sum_profit

@pytest.mark.parametrize("text, expected", [
    ("", []),
    ("123465", [123465]),
    ("0000", [0000]),
    ("-12", [-12]),
    ("-12.123", [-12.123]),
    ("1.2 2.3 3.4 4.5 5.6", [1.2, 2.3, 3.4, 4.5, 5.6]),
    ("-1.2 -2.3 -3.4 -4.5 -5.6 --6.7", [-1.2, -2.3, -3.4, -4.5, -5.6]),
    ("""Загальний дохід працівника складається з декількох частин: 1000.01
     як основний дохід, доповнений додатковими надходженнями 27.45 і 324.00 доларів.""",
     [1000.01, 27.45, 324.00]),
    ("""Загальний дохід працівника складається з декількох частин: 1000 як
     основний дохід, доповнений додатковими надходженнями 27 і 324 доларів.""",
     [1000, 27, 324]),
    ("""Загальний дохід працівника складається з декількох частин: 1000як
     основний дохід, доповнений додатковими надходженнями 27і324 доларів.""",
     []),
])
def test_generator_numbers(text, expected):
    """Test generator_numbers function."""
    assert list(generator_numbers(text)) == expected

@pytest.mark.parametrize("text, expected", [
    ("", 0),
    ("123465", 123465),
    ("1.2 2.3 3.4 4.5 5.6", 17),
    ("-1.2 -2.3 -3.4 -4.5 -5.6 --6.7", -17),
    ("""Загальний дохід працівника складається з декількох частин:
     1000.01 як основний дохід, доповнений додатковими надходженнями 27.45 і 324.00 доларів.""",
     1351.46),
    ("""Загальний дохід працівника складається з декількох частин:
     1000 як основний дохід, доповнений додатковими надходженнями 27 і 324 доларів.""",
     1351),
    ("""Загальний дохід працівника складається з декількох частин:
     1000як основний дохід, доповнений додатковими надходженнями 27і324 доларів.""",
     0),
])
def test_sum_profit(text, expected):
    """Test sum_profit function."""
    assert sum_profit(text, generator_numbers) == expected
